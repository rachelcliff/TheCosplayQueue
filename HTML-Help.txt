<h2>Manual Installation</h2>
Download the repository onto your local computer and start up your virtual web server supplier of choice. 
Create a new blank database within your chose PHP myAdmin program and name it "cosplay_queue". Import the sql file contained in the API folder (alternatively there is a deployment script currently being created)
Install the client and api folders into a web server such as Xampp or Wamp. The folders need to be installed into the htdocs folder if your using Xampp, or the www folder if you're using Wamp.
Update the database connection settings found within the db.php file with the username and password needed to access the database.
Installation is now complete, and the app should now be functional.          
<h2>Run API Tests</h2>
Located in the main hub of the repository there is a file called the cosplay_queue_test_script. This file contains the curl information needed to test the functions of the systems API. Use this file and Powershell/your console of choice to run this file and test API functions. 
<h3>Start the Back End Webserver</h3>
In the terminal, run npm start to start the build server. To start the production server user npm run-script build. Follow the node instructions to set up the system and server. In order to stop the CORS policy from preventing fetch requests (key parts of the API) start your browser without security restrictions using the run console. 
<h3>Start the Front End Webserver</h3> 
The webserver is now running at http://localhost:3000 or http://localhost:5000 depending on whether the app was started in development or production. 
The front end is now running at http://localhost:80
Navigate to http://localhost:80. The app may be used either logged in or logged out. The admin user for this account is tester5 and has the credentials of username:tester5 and the password of 1234. This login can be used to access both the front end and back end of the site.
        
<h2>Backend Information</h2>
<h3>Security</h3>
All users on the system that are registered users use php encryption to hash the passwords in the database and ensure their security. 
The admin panel is protected using a form of IP whitelisting that hides all accessible fields from display and sends the user attempting access back to the front end of the app if their IP doesn’t match the IP coded into the system. 
Should a user get through to the backend by using the same IP, they will still be blocked from accessing the backend if they do not have the permission of “admin” assigned to their account in the database.
<h3>Api</h3>
For this application I have used the base case system to create the main API of the system This file is the API.php file and is located in the SRC folder of the application data. This file contains the main functions for the operations of the app and is utilised by both the backend and the frontend of the interface to create functionality. There are two supplementary filed to the API.php file which are the db.php and the sessions.php files both of which are crucial for functionality. The db file contains all the sql requests that actually interact with and modify the database for the app, and the sessions file holds all the data related to rate limiting, is logged in verification and the logout functions. 
The API works on a series of Get, Post and Update requests which allow users to interact with the database without the security risk of them being fully connected to them directly. 
<h2>Form Validation</h2>
<h3>React Form Validation</h3>
Form validation on the user facing section of the admin panel is supplied by the inbuilt React Form Validation feature. It used the set state function to test whether inputs meet the set regex criteria and if it doesn’t the code won’t run, and an error will appear. 
<h3>PHP Form Validation</h3>
PHP validation is the server side validation method for this app. It’s a basic form of validation that checks whether a field is empty and if it is, it gives a die command. 
<h2>API tests</h2>
<h3>Talend custom test script</h3>
The Talend API tester was used to create the testing script for the app. The test functions and the expected response codes are as follows:
showDetailss(GET) - 201 CREATED
fillupdate (GET) – 201 CREATED
Join(POST) – 201 CREATED
Signup(POST) – 201 CREATED
Login(POST) – 201 CREATED
Update(POST) – 201 CREATED
Dequeue(POST) – 201 CREATED
Placequeue(GET) – 201 Created
Logout(GET) – 201 CREATED 
<h2>Frontend Information</h2>
<h3>Materialize</h3>
Materialize is the front end framework for the app. It creates all the styling elements and functionality with assistance from js triggers. 
<h3>Local Storage</h3>
Local storage is implemented in the app in 2 locations. The first being the dark mode trigger, and the second to save update information in the update details form.  

<h2>Form Validation</h2>
<h3>HTML Form Validation</h3>
Form validation on the user facing section of the front end is done by hard coding a regex into the form pattern field. It tests whether inputs meet the set regex criteria and if it doesn’t the code won’t run, and an error will appear. 
<h3>JS Form Validation</h3>
JS form validation checks whether fields are empty, and if the field is classed as required. If it is and the field is empty it will trigger a return command and console log an error of what went wrong. 
<h3>PHP Form Validation</h3>
PHP validation is the server side validation method for this app. It’s a basic form of validation that checks whether a field is empty and if it is, it gives a die command. 
<h2>Navigating the App</h2>
There are 8 key functions within the app:
Join
Register
Login
Show place in queue – located in modal that triggers after join
Show user details inputted on join – located in modal that triggers after join
Dequeue – located in modal that triggers after join
Update Details – located in modal that triggers from buttons in both the side nav and welcome modal post login
Logout – located in modal that triggers from buttons in both the side nav and welcome modal post login
Users
Due to the nature of how this app is intended to be used the app can be used by both logged in and non-logged in users, some functions are restricted to logged in users only (update details and logged in). The join and register functions are available to everyone and as such do not require log in credentials to be used. 

